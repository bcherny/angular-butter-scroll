// Generated by CoffeeScript 1.7.1
describe('angular-butter-scroll', function() {
  var options, _;
  _ = {
    throttle: function(fn) {
      return fn;
    }
  };
  options = {
    className: 'disable-pointer-events',
    delay: 100
  };
  beforeEach(module('turn/angularButterScroll'), function($provide) {
    $provide.value('angularButterScrollOptions', options);
    return $provide.value('_', _);
  });
  beforeEach(function() {
    return inject((function(_this) {
      return function($compile, $rootScope) {
        var divs;
        _this.$compile = $compile;
        divs = Array.apply(null, Array(100)).map(function() {
          return '<div style="height: 100px"></div>';
        });
        _this.scope = $rootScope.$new();
        return _this.element = angular.element("<div angular-butter-scroll>\n	" + divs + "\n</div>");
      };
    })(this));
  });
  beforeEach(function() {
    (this.$compile(this.element))(this.scope);
    this.scope.$apply();
    return this.scope = this.element.scope();
  });
  describe('#clear', function() {
    return it('should remove the class defined in options.className from the element', function() {
      this.element.addClass(options.className);
      expect(this.element.hasClass(options.className)).toBe(true);
      this.scope.clear();
      return expect(this.element.hasClass(options.className)).toBe(false);
    });
  });
  return describe('#scroll', function() {
    it('should add the class defined in options.className to the element', function() {
      this.element.removeClass(options.className);
      expect(this.element.hasClass(options.className)).toBe(false);
      this.scope.scroll();
      return expect(this.element.hasClass(options.className)).toBe(true);
    });
    it('should cancel the $timeout if it exists', inject(function($timeout) {
      this.scope.timer = 42;
      spyOn($timeout, 'cancel');
      this.scope.scroll();
      return expect($timeout.cancel).toHaveBeenCalled();
    }));
    it('should not attempt to cancel $timeout if it does not exist', inject(function($timeout) {
      this.scope.timer = null;
      spyOn($timeout, 'cancel');
      this.scope.scroll();
      return expect($timeout.cancel).not.toHaveBeenCalled();
    }));
    it('should assign a new $timeout instance to scope.timer', inject(function($timeout) {
      this.scope.timer = null;
      this.scope.scroll();
      return expect(this.scope.timer.$$timeoutId).toBeDefined;
    }));
    return it('should call #clear after options.delay has elapsed', inject(function($timeout) {
      spyOn(this.scope, 'clear');
      this.scope.scroll();
      return $timeout(function() {
        return expect(this.scope.clear).toHaveBeenCalled();
      }, options.delay);
    }));
  });
});
